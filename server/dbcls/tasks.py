import json
from enum import Enum
import os
import subprocess
import tempfile

from werkzeug.datastructures import FileStorage

from dbcls import db, app, redis_client
from dbcls.constants import TASK_PROPERTIES_EXPIRE
from dbcls.models import DataSet, User


class UmakaparserState(Enum):
    PENDING = 0
    STARTED = 1
    SUCCESS = 2
    FAILURE = 3


class UmakaparserException(Exception):
    def __init__(self, return_code, message):
        self.return_code = return_code
        self.message = message


def update_task_properties(task_id=None, **kwargs):
    if task_id is None:
        return

    task_properties = redis_client.get(task_id)
    if not task_properties:
        return

    task_properties = json.loads(task_properties)
    for key in kwargs:
        task_properties[key] = kwargs[key]
    pipe = redis_client.pipeline()
    pipe.set(task_id, json.dumps(task_properties))
    pipe.expire(task_id, TASK_PROPERTIES_EXPIRE)
    pipe.execute()


class ProcessErrorType(Enum):
    CONVERT_ERROR = 'CONVERT_ERROR'
    OWL_ERROR = 'OWL_ERROR'
    SBM_ERROR = 'SBM_ERROR'


def generate_by_umakaparser(user_id, sbm_path, ontology_path, task_id=None):
    with app.app_context():
        update_task_properties(
            task_id,
            state=UmakaparserState.STARTED.value,
            pid=os.getpid()
        )

        try:
            user = User.query.get(user_id)
            if not user:
                raise UmakaparserException(1, f'user({user_id}) not found')

            _, output = tempfile.mkstemp()

            with tempfile.TemporaryDirectory() as assets_path:
                # オントロジーをコンバート
                assets = []
                if ontology_path:
                    _, ext = os.path.splitext(ontology_path)
                    if ext not in ('.ttl', '.nt'):
                        converted_path = os.path.join(
                            assets_path, 'converted_file.nt')
                        with open(converted_path, 'w') as fp:
                            convert_process = subprocess.run(
                                ['java', '-jar', 'ConvRDF/ConvRDF.jar', ontology_path],
                                stdout=fp,
                                stderr=subprocess.PIPE,
                                encoding='utf-8'
                            )

                        if convert_process.returncode != 0:
                            raise UmakaparserException(
                                convert_process.returncode,
                                ProcessErrorType.CONVERT_ERROR.value
                            )
                    else:
                        converted_path = ontology_path

                    # オントロジーからassets
                    build_index = subprocess.run(
                        ['umakaparser', 'build-index',
                            converted_path, '-d', assets_path],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        encoding='utf-8'
                    )
                    if build_index.returncode != 0:
                        raise UmakaparserException(
                            build_index.returncode,
                            ProcessErrorType.OWL_ERROR.value
                        )
                    assets = ['-a', assets_path]
                # モデルデータ作成
                build = subprocess.run(
                    ['umakaparser', 'build'] + assets + ['-d', output, sbm_path],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    encoding='utf-8'
                )
                if build.returncode != 0:
                    raise UmakaparserException(
                        build.returncode,
                        ProcessErrorType.SBM_ERROR.value
                    )
                # 生成されたJSONファイルからDataSetを作成
                with open(output, 'rb') as json_file:
                    data_set = DataSet.create(user, FileStorage(
                        json_file, 'generated by umakaparser'))
                db.session.add(data_set)
                db.session.commit()

            update_task_properties(
                task_id,
                state=UmakaparserState.SUCCESS.value,
                data_set_id=data_set.id
            )
        except UmakaparserException as e:
            update_task_properties(
                task_id,
                state=UmakaparserState.FAILURE.value,
                message=e.message
            )
        finally:
            os.remove(output)
            if ontology_path:
                os.remove(ontology_path)
            os.remove(sbm_path)
